# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: skipper

on:
  push:
  pull_request:
  release: # need to create Github release, instead of just tag creation
    types: [published, edited]

jobs:
  build_lib:
    # avoid building for forked repos but build for PR from forked repo
    if: github.repository == 'unbxd/skipper'
    runs-on: ubuntu-latest
    env:
      SERVICE_NAME: "skipper"
      GCR_URL: ${{ secrets.GCR_URL }}
      GCR_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION}}
      GIT_HUB_USER: ${{ secrets.PLATFORM_BOT_GITHUB_USER }}
      GIT_HUB_TOKEN: ${{ secrets.PLATFORM_BOT_GITHUB_TOKEN }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      SLACK_WEBHOOK_URL: ${{ secrets.PLATFORM_SLACK_WEBHOOK_URL }}

    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Install and update required ubuntu packages
        run: |
          sudo apt-get -qq update
          sudo apt-get install --no-install-recommends -y python3 python3-pip
          sudo apt-get clean
          sudo rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

      - name: Extract Tag
        id: extract_tag
        env:
          TAG: ${{ github.event.release.tag_name }}
        run: |
          TAG=${{ github.event.release.tag_name }}
          tag="PR_${GITHUB_ACTOR}_${GITHUB_HEAD_REF}"
          if [ -z "$GITHUB_HEAD_REF" ]; then
              tag=latest
              if [ -n "$TAG" ]; then
                  tag=$TAG
              fi
          else
              tag="PR_${GITHUB_ACTOR}_${GITHUB_HEAD_REF}";
          fi
          echo ::set-output name=BUILD_TAG::$(echo $tag)

      - name: Install AWS Client
        run: |
          python -m pip install --upgrade pip
          pip install setuptools
          pip install awscli

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION}}

      - uses: google-github-actions/setup-gcloud@v0
        id: setup-gcloud
        with:
          service_account_key: ${{ secrets.GCR_SERVICE_KEY }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          export_default_credentials: true

      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          # invalidated on changes to pom.xml
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Setup Maven repository
        run: cp $GITHUB_WORKSPACE/.maven.settings.xml $HOME/.m2/settings.xml

      - name: Build with Maven
        run: |
          cd $GITHUB_WORKSPACE
          mvn clean package

      - name: Build Docker Image
        id: build-docker-image
        run: |
          cd $GITHUB_WORKSPACE
          docker build -t skipper:latest .

      - name: Push Docker image to AWS ECR
        id: push-docker-image-aws
        env:
          TAG: ${{ github.event.release.tag_name }}
        run: |
          cd $GITHUB_WORKSPACE
          $GITHUB_WORKSPACE/scripts/ci.sh

      - name: Push Docker image To GCR
        id: push-docker-image-gcr
        env:
          TAG: ${{ github.event.release.tag_name }}
          BUILD_TAG: ${{ steps.extract_tag.outputs.BUILD_TAG }}
        run: |
          cd $GITHUB_WORKSPACE
          gcloud auth configure-docker -q
          docker tag skipper:latest $GCR_URL/$GCR_PROJECT_ID/$SERVICE_NAME:$BUILD_TAG
          docker push $GCR_URL/$GCR_PROJECT_ID/$SERVICE_NAME:$BUILD_TAG
          if [ ! -z "$TAG" ]; then
             docker tag skipper:latest $GCR_URL/$GCR_PROJECT_ID/$SERVICE_NAME:latest
             docker push $GCR_URL/$GCR_PROJECT_ID/$SERVICE_NAME:latest
          fi

      - name: Build post-upgrade Docker Image
        id: build-post-upgrade-docker-image
        run: |
          cd $GITHUB_WORKSPACE/scripts
          docker build -t skipper-post-upgrade:latest .

      - name: Push post-upgrde Docker image to AWS ECR
        id: push-post-upgradedocker-image-aws
        env:
          TAG: ${{ github.event.release.tag_name }}
        run: |
          export SERVICE_NAME=skipper-post-upgrade
          cd $GITHUB_WORKSPACE
          $GITHUB_WORKSPACE/scripts/ci.sh

      - name: Push post-upgrade Docker image To GCR
        id: push-post-upgrade-docker-image-gcr
        env:
          TAG: ${{ github.event.release.tag_name }}
          BUILD_TAG: ${{ steps.extract_tag.outputs.BUILD_TAG }}
        run: |
          cd $GITHUB_WORKSPACE
          export SERVICE_NAME=skipper-post-upgrade
          gcloud auth configure-docker -q
          docker tag skipper-post-upgrade:latest $GCR_URL/$GCR_PROJECT_ID/$SERVICE_NAME:$BUILD_TAG
          docker push $GCR_URL/$GCR_PROJECT_ID/$SERVICE_NAME:$BUILD_TAG
          if [ ! -z "$TAG" ]; then
             docker tag skipper:latest $GCR_URL/$GCR_PROJECT_ID/$SERVICE_NAME:latest
             docker push $GCR_URL/$GCR_PROJECT_ID/$SERVICE_NAME:latest
          fi

      - name: Build test Docker Image
        id: build-test-docker-image
        run: |
          cd $GITHUB_WORKSPACE/test
          docker build -t skipper:test-latest .

      - name: Push test Docker image to AWS ECR
        id: push-test-docker-image-aws
        env:
          TAG: ${{ github.event.release.tag_name }}
          SOURCE_TAG: test-latest
          PREFIX: test
        run: |
          export SERVICE_NAME=skipper
          cd $GITHUB_WORKSPACE
          $GITHUB_WORKSPACE/scripts/ci.sh

      - name: Push test Docker image To GCR
        id: push-test-docker-image-gcr
        env:
          TAG: test-${{ github.event.release.tag_name }}
          BUILD_TAG: test-${{ steps.extract_tag.outputs.BUILD_TAG }}
        run: |
          cd $GITHUB_WORKSPACE
          export SERVICE_NAME=skipper
          gcloud auth configure-docker -q
          docker tag skipper:test-latest $GCR_URL/$GCR_PROJECT_ID/$SERVICE_NAME:$BUILD_TAG
          docker push $GCR_URL/$GCR_PROJECT_ID/$SERVICE_NAME:$BUILD_TAG
          if [ ! -z "$TAG" ]; then
             docker tag skipper:test-latest $GCR_URL/$GCR_PROJECT_ID/$SERVICE_NAME:test-latest
             docker push $GCR_URL/$GCR_PROJECT_ID/$SERVICE_NAME:test-latest
          fi
      
#      - name: Build skipper-migration Docker Image
#        id: build-skipper-migration-docker-image
#        run: |
#          cd $GITHUB_WORKSPACE/scripts/migration/variants
#          docker build -t skipper-migration:latest .
#
#      - name: Push skipper-migration Docker image to AWS ECR
#        id: push-skipper-migration-image-aws
#        env:
#          TAG: ${{ github.event.release.tag_name }}
#        run: |
#          aws ecr get-login --region us-east-1 --no-include-email
#          export ecr_url=012629307706.dkr.ecr.us-east-1.amazonaws.com
#          docker tag skipper-migration:latest $ecr_url/skipper:variants-migration
#          docker push $ecr_url/skipper:variants-migration


#      - name: Build site-migration Docker Image
#        id: build-site-migration-docker-image
#        run: |
#          cd $GITHUB_WORKSPACE/scripts/migration/site-v1-to-v2
#          docker build -t site-migration:latest .

#      - name: Push site-migration Docker image to AWS ECR
#        id: push-site-migration-image-aws
#        env:
#          TAG: ${{ github.event.release.tag_name }}
#        run: |
#          aws ecr get-login --region us-east-1 --no-include-email
#          export ecr_url=012629307706.dkr.ecr.us-east-1.amazonaws.com
#          docker tag site-migration:latest $ecr_url/skipper:site-migration
#          docker push $ecr_url/skipper:site-migration

      - name: Build dictionary-migration Docker Image
        id: build-dictionary-migration-docker-image
        run: |
          cd $GITHUB_WORKSPACE/scripts/migration/dictionary
          docker build -t dictionary-migration:latest .

      - name: Push dictionary-migration Docker image to AWS ECR
        id: push-dictionary-migration-image-aws
        env:
          TAG: ${{ github.event.release.tag_name }}
        run: |
          aws ecr get-login --region us-east-1 --no-include-email
          export ecr_url=012629307706.dkr.ecr.us-east-1.amazonaws.com
          docker tag dictionary-migration:latest $ecr_url/skipper:dictionary-migration
          docker push $ecr_url/skipper:dictionary-migration
          
      - name: Build backup Docker Image
        id: build-backup-docker-image
        run: |
          cd $GITHUB_WORKSPACE/scripts/backup
          docker build -t backup:latest .

      - name: Push backup Docker image to AWS ECR
        id: push-backup-image-ecr
        run: |
          export ecr_url=012629307706.dkr.ecr.us-east-1.amazonaws.com
          docker tag backup:latest $ecr_url/skipper:backup
          docker push $ecr_url/skipper:backup

      - name: Push backup Docker image to GCR
        id: push-backup-image-gcr
        run: |
          docker tag backup:latest $GCR_URL/$GCR_PROJECT_ID/$SERVICE_NAME:backup
          docker push $GCR_URL/$GCR_PROJECT_ID/$SERVICE_NAME:backup

      - name: Create kind cluster
        uses:  helm/kind-action@v1.2.0

      - name: Run chart-testing (install)
        uses: helm/chart-testing-action@v2.1.0
    
      - name: Add aws secrets to kubernetes
        run: |
          export ecr_url=012629307706.dkr.ecr.us-east-1.amazonaws.com
          kubectl create namespace ss
          PASS=$(aws ecr get-login-password)
          kubectl create secret docker-registry regcred --docker-server=https://$ecr_url --docker-username=AWS --docker-password=$PASS --docker-email=devops@unbxd.com --namespace ss
       
 
      - name: Install skipper
        env:
          BUILD_TAG: ${{ steps.extract_tag.outputs.BUILD_TAG }}
        run: |
          kubectl get pods -n ss
          helm install --wait mongo helm/mongo/ -n ss
          kubectl get pods -n ss
          helm install skipper -n ss helm/skipper -f helm/skipper/values-integration-test.yaml --set image.pullPolicy=IfNotPresent --set image.tag=$BUILD_TAG --set postUpgradeImage.tag=$BUILD_TAG --set postUpgradeImage.pullPolicy=IfNotPresent

      - name: run tests
        run: |
          kubectl get pods -n ss
          helm test skipper -n ss

      - name: check kubernetes logs
        if: always()
        run: |
          kubectl get pods -n ss
          kubectl logs -f $(kubectl get pods -n ss | grep test-skipper | head -n 1 | cut -d " " -f1 ) -n ss

      - uses: act10ns/slack@v1
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          channel: '#ss-builds'
        if: always()

      
