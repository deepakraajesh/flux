package com.unbxd.skipper.relevancy.service.output.update;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.inject.Inject;
import com.unbxd.config.Config;
import com.unbxd.console.exception.ConsoleOrchestrationServiceException;
import com.unbxd.console.model.ConsoleFacetField;
import com.unbxd.console.model.ConsoleFacetFieldRequest;
import com.unbxd.console.model.FacetResponse;
import com.unbxd.console.model.ProductType;
import com.unbxd.console.service.ConsoleOrchestrationService;
import com.unbxd.s3.AmazonS3Client;
import com.unbxd.skipper.controller.model.response.APIResponse;
import com.unbxd.skipper.relevancy.dao.RelevancyDao;
import com.unbxd.skipper.relevancy.expection.RelevancyServiceException;
import com.unbxd.skipper.relevancy.model.JobType;
import com.unbxd.skipper.relevancy.model.RelevancyOutputModel;
import com.unbxd.skipper.relevancy.service.RelevancyOutputUpdateProcessor;
import lombok.extern.log4j.Log4j2;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import static com.google.common.io.Files.move;
import static com.unbxd.console.service.FacetRemoteService.FACET_AUTH_KEY;

@Log4j2
public class FacetUpdate implements RelevancyOutputUpdateProcessor {

    protected RelevancyDao relevancyDao;
    protected ConsoleOrchestrationService consoleService;
    protected String facetAuthToken;
    protected AmazonS3Client s3Client;
    protected ObjectMapper mapper = new ObjectMapper();

    @Inject
    public FacetUpdate(Config config, ConsoleOrchestrationService consoleService,
                       RelevancyDao relevancyDao, AmazonS3Client s3Client) {
        this.relevancyDao = relevancyDao;
        this.consoleService = consoleService;
        this.facetAuthToken = config.getProperty(FACET_AUTH_KEY, null);
        this.s3Client = s3Client;
        if(facetAuthToken == null)
            throw new IllegalArgumentException(FACET_AUTH_KEY + " property is not defined");
    }

    protected void disableAllExistingFacets(String cookie, String siteKey, ProductType productType)
            throws RelevancyServiceException {
       log.info("Clearing all enabled facets for siteKey: " + siteKey);
        APIResponse<FacetResponse> facets = consoleService.fetchSiteRuleFacets(null, cookie,
                siteKey, "1", null, null, "0", productType);
        validateConsoleResponse(siteKey, facets);
        long total = facets.getData().getNumberOfEnableFacets();
        int pageSize = 200;
        long totalNumberOfPages = total/pageSize;
        for(long page=1;page <= totalNumberOfPages+1;page++) {
            facets = consoleService.fetchSiteRuleFacets(null, cookie, siteKey, String.valueOf(page),
                    null, null, String.valueOf(pageSize), productType);
            validateConsoleResponse(siteKey, facets);
            List<ConsoleFacetField> facetsToBeDisabled = new ArrayList<>();
            for(ConsoleFacetField facet: facets.getData().getFacets()) {
                if(facet.getEnabled() != null && facet.getEnabled()) {
                    facet.setEnabled(Boolean.FALSE);
                    facetsToBeDisabled.add(facet);
                }
            }
            if(facetsToBeDisabled.size() == 0)
                continue;
            ConsoleFacetFieldRequest consoleFacetFields = new ConsoleFacetFieldRequest(facetsToBeDisabled, productType);
            APIResponse<FacetResponse> resp = consoleService
                    .deleteSiteRuleFacets(null, cookie, siteKey, consoleFacetFields);
            validateConsoleResponse(siteKey, resp);
        }

    }

    /**
     * Fetch the data from the mongo,
     * 1. For every output create facet
     * 2. For those facet that is enabled updateInGlobalSiteRule
     * 3. Publish the siteRule
     * @param siteKey
     * @param jobType
     * @throws RelevancyServiceException
     */
    @Override
    public int update(String siteKey, JobType jobType, ProductType productType) throws RelevancyServiceException {
        return update(null, siteKey, jobType, productType);
    }

    protected int update(String cookie, String siteKey, JobType jobType,
                          ProductType productType) throws RelevancyServiceException {
        // Pagination over the relevancyDAO service
        RelevancyOutputModel output = relevancyDao.fetchRelevancyOutput(jobType, siteKey);
        if(output == null) {
            String msg = "No facet data generated by the relevancy job";
            log.warn(msg + " for site: "+ siteKey);
            return 0;
        }

        try {
            File file = downloadFile(output.getS3Location());
            consoleService.uploadFacets(file, siteKey, "search");
        } catch (ConsoleOrchestrationServiceException e) {
            throw new RelevancyServiceException(500, "Exception while trying"
                    + " to upload facets to console: " + e.getMessage());
        }
        return 0;
    }

    private File downloadFile(String s3Path)
            throws RelevancyServiceException {
        try {
            File facetsFile = new File("facets.csv");
            File file = s3Client.downloadFile(s3Path);
            move(file, facetsFile);
            return facetsFile;
        } catch (IOException e) {
            throw new RelevancyServiceException(500, "Exception "
                    + "while trying to rename facets file: "
                    + e.getMessage());
        }
    }

    @Override
    public void reset(String cookie, String siteKey, JobType jobType,
                      ProductType productType) throws RelevancyServiceException {
        disableAllExistingFacets(cookie, siteKey, productType);
        update(cookie, siteKey, jobType, productType);
    }

    private void validateConsoleResponse(String siteKey, APIResponse resp) throws RelevancyServiceException {
        if(resp != null && resp.getErrors() != null && resp.getErrors().size() > 0) {
            String msg = "Error while updating facet to search";
            log.error(msg + " for site " + siteKey + ", reason " + resp.getErrors().get(0));
            throw new RelevancyServiceException(500, msg);
        }
    }
}

